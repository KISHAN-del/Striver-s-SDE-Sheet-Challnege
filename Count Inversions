#include <bits/stdc++.h> 
// using namespace std;
long long c=0;
    void merge( long long arr[], int l, int m, int r)
    {
      // int y=0;
      int n1=m-l+1;
      int n2=r-m;
      int a[n1];
      int b[n2];
      int k=l;
      for(int i=0;i<n1;i++)a[i]=arr[l+i];
      for(int i=0;i<n2;i++)b[i]=arr[m+1+i];
      int i=0,j=0;
      // int c=0;
      while(i<n1 and j<n2){
          if(a[i]<b[j]){

              arr[k]=a[i];
              k++;i++;
          }
        //   else if(a[i]>=b[j])
        //   {
        else{
            c+=(n1-i);
              arr[k]=b[j];
              k++;j++;
          
        }
      }
      while(i<n1){
      arr[k]=a[i];
      k++;i++;
      }
      while(j<n2){
          arr[k]=b[j];
        k++;j++;
      }
      // return y;
    }
 void mergeSort(long long arr[], long long l, long long r){
    
        // if(l>=r)return 0;
//  long long c=0;
 if (l < r) {
   long long m = (l + r) / 2;
  mergeSort(arr, l, m);
  mergeSort(arr, m + 1, r);
  merge(arr, l, m, r);
 }
//  c;
    
    }
long long getInversions(long long *arr, int n){
    //    long long c=0;
       
        mergeSort(arr,0,n-1);
        return c;
    //    return c; 
}
