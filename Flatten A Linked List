/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */
Node* merge(Node* h1, Node* h2)  
    {
     if(!h1)return h2;
     if(!h2)return h1;
      
    if(h2->data<h1->data)return merge(h2,h1);
    Node*c=h1;
    Node*l1=h1->child;
    Node*l2=h2;
    
    while(l1 and l2){
         if(l1->data<l2->data){
             c->child=l1;
             c=l1;
             l1=l1->child;
         }
         else{
             c->child=l2;
             c=l2;
             l2=l2->child;
         }
    
    }
    
    if(l1){
        c->child=l1;
    }
    else
    c->child=l2;
    
    
    
  return h1; 
  }


Node* flattenLinkedList(Node* root) 
{
    if(!root || root->next==NULL)return root;
    // Node*l2=NULL;
    // if(root)
    // {
   Node* l2=root->next;
   root->next=NULL;
        
    // }
   Node*l1=root;
  Node*ml=merge(l1,l2);
//   Node* r=NULL;
//   if(l2)
  Node* r=flattenLinkedList(l2->next);
  l2->next=NULL;
  return merge(ml,r);
}
